/**
 * Flagr
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice
 *
 * OpenAPI spec version: 1.0.8
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EvaluationEntity'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./EvaluationEntity'));
  } else {
    // Browser globals (root is window)
    if (!root.Flagr) {
      root.Flagr = {};
    }
    root.Flagr.EvaluationBatchRequest = factory(root.Flagr.ApiClient, root.Flagr.EvaluationEntity);
  }
}(this, function(ApiClient, EvaluationEntity) {
  'use strict';




  /**
   * The EvaluationBatchRequest model module.
   * @module model/EvaluationBatchRequest
   * @version 1.0.8
   */

  /**
   * Constructs a new <code>EvaluationBatchRequest</code>.
   * @alias module:model/EvaluationBatchRequest
   * @class
   * @param entities {Array.<module:model/EvaluationEntity>} 
   * @param flagIDs {Array.<Number>} 
   */
  var exports = function(entities, flagIDs) {
    var _this = this;

    _this['entities'] = entities;

    _this['flagIDs'] = flagIDs;
  };

  /**
   * Constructs a <code>EvaluationBatchRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EvaluationBatchRequest} obj Optional instance to populate.
   * @return {module:model/EvaluationBatchRequest} The populated <code>EvaluationBatchRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('entities')) {
        obj['entities'] = ApiClient.convertToType(data['entities'], [EvaluationEntity]);
      }
      if (data.hasOwnProperty('enableDebug')) {
        obj['enableDebug'] = ApiClient.convertToType(data['enableDebug'], 'Boolean');
      }
      if (data.hasOwnProperty('flagIDs')) {
        obj['flagIDs'] = ApiClient.convertToType(data['flagIDs'], ['Number']);
      }
    }
    return obj;
  }

  /**
   * @member {Array.<module:model/EvaluationEntity>} entities
   */
  exports.prototype['entities'] = undefined;
  /**
   * @member {Boolean} enableDebug
   */
  exports.prototype['enableDebug'] = undefined;
  /**
   * @member {Array.<Number>} flagIDs
   */
  exports.prototype['flagIDs'] = undefined;



  return exports;
}));


